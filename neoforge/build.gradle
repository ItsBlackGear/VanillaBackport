plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

sourceSets.main.resources.srcDirs += project(":common").file("src/main/generated")

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"
//    modApi "flatDir:Platform-forge-1.21.1-$rootProject.platform_indev_version"
    modApi "curse.maven:platform-997634:$rootProject.platform_neoforge_version"

    modApi("com.github.glitchfiend:TerraBlender-neoforge:$rootProject.terrablender_version")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    atAccessWideners.add("${rootProject.name}.accesswidener")
    inputFile.set shadowJar.archiveFile
}
